TODO for podload

* create an init.d file for running as daemon
* add a "brutal mode" flag for brutally scraping things that aren't actually rss feeds.
** re-use my old py regexps, i.e.
   #+BEGIN_SRC python
     ['.*"(http:.+mp3)".*',
        '.*>(http:.+mp3)<.*',   
        '.*>(http:.+ogg)<.*',
        '.*"(http:.+ogg)".*',
        '.*>(http:.+flac)<.*',
        '.*"(http:.+flac)".*',
        '.*"(.+flac)".*',
        '.*"(.+m3u)".*']
   #+END_SRC
* expose the seed feature via some commandline switch
* some kind of gui for editing the configs
** clojurescript? web based front-end?
* some way to dynamically add/remove configs from the queue
** i.e. based on
   #+BEGIN_SRC clojure
    (seq (.getQueue executor))
   #+END_SRC
* better command-line handling
** i.e.
   #+BEGIN_SRC clojure
    (let [[opts args banner] (cli/cli args
                                    ["-h"
                                     "--help" "pass config filename"
                                     :default false
                                     :flag true])]
    (when (:help opts)
      (println banner)))
   #+END_SRC
* use env properly
* add log file path as an optional (with default) item in the config file and process it
* integrate with smart blocks somehow more closely?
* check the feed automatically, keep track of what shows have been downloaded already, and only download a show if there is a new one
